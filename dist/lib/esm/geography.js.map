{
  "version": 3,
  "sources": ["../../../src/geography.ts"],
  "sourcesContent": ["// \u5730\u7403\u306E\u8D64\u9053\u76F4\u5F84(m)\nexport const R = 6378137;\nexport const TILE_PIXEL = 256; // \u30BF\u30A4\u30EB1\u8FBA\u306E\u30D4\u30AF\u30BB\u30EB\u6570\n\nexport class Geography {\n    static getTilePixelByZoom(zoom: number) {\n        return TILE_PIXEL * (2 ** zoom / 2 ** Math.round(zoom));\n    }\n\n    // \u7D4C\u7DEF\u5EA6\u3092\u30B0\u30EA\u30CB\u30C3\u30B8\u5B50\u5348\u7DDA/\u8D64\u9053\u3092\u539F\u70B9\u3068\u3057\u305Fm\u5358\u4F4D\u306B\u5909\u63DB\u3059\u308B\n    static degrees2meters(lat: number, lng: number) {\n        const x = (lng * 20037508.34) / 180;\n        const y = 6378137 * Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 180 / 2));\n        return { x, y };\n    }\n\n    // \u30B0\u30EA\u30CB\u30C3\u30B8\u5B50\u5348\u7DDA/\u8D64\u9053\u3092\u539F\u70B9\u3068\u3057\u305Fm\u5358\u4F4D\u3092\u7D4C\u7DEF\u5EA6\u306B\u5909\u63DB\u3059\u308B\n    static meters2degrees(mx: number, my: number) {\n        const lat = ((2 * Math.atan(Math.exp(my / R)) - Math.PI / 2) / Math.PI) * 180;\n        const lng = (mx / R / Math.PI) * 180;\n        return { lat, lng };\n    }\n\n    // \u30B0\u30EA\u30CB\u30C3\u30B8\u5B50\u5348\u7DDA/\u8D64\u9053\u3092\u539F\u70B9\u3068\u3057\u305Fm\u5358\u4F4D\u3092\u5730\u56F3\u30BF\u30A4\u30EB\u72B6\u306EX/Y\u306B\u5909\u63DB\u3059\u308B\n    static meters2tile(mx: number, my: number, zoom: number) {\n        const x = Math.floor(((mx + R * Math.PI) / (2 * R * Math.PI)) * 2 ** Math.round(zoom));\n        const y = Math.floor((1 - (my + R * Math.PI) / (2 * R * Math.PI)) * 2 ** Math.round(zoom));\n        return { x, y };\n    }\n\n    // \u7D4C\u7DEF\u5EA6\u3092\u5730\u56F3\u30BF\u30A4\u30EB\u72B6\u306EX/Y\u306B\u5909\u63DB\u3059\u308B\n    static degrees2tile(lat: number, lng: number, zoom: number) {\n        const r = Geography.degrees2meters(lat, lng);\n        return Geography.meters2tile(r.x, r.y, zoom);\n    }\n\n    // \u5730\u56F3\u30BF\u30A4\u30EB\u72B6\u306EX/Y\u3092\u30B0\u30EA\u30CB\u30C3\u30B8\u5B50\u5348\u7DDA/\u8D64\u9053\u3092\u539F\u70B9\u3068\u3057\u305Fm\u5358\u4F4D\u306B\u5909\u63DB\u3059\u308B\n    // \u30BF\u30A4\u30EB\u306E\u5DE6\u4E0A\u9685\u306E\u5EA7\u6A19\u3068\u306A\u308B\n    static tile2meters(x: number, y: number, zoom: number) {\n        const mx = (x / 2 ** Math.round(zoom)) * (2 * R * Math.PI) - R * Math.PI;\n        const my = (1 - y / 2 ** Math.round(zoom)) * (2 * R * Math.PI) - R * Math.PI;\n        return { x: mx, y: my };\n    }\n\n    // \u30B0\u30EA\u30CB\u30C3\u30B8\u5B50\u5348\u7DDA/\u8D64\u9053\u3092\u539F\u70B9\u3068\u3057\u305Fm\u5358\u4F4D\u3092\u3001\u30EF\u30FC\u30EB\u30C9\u5EA7\u6A19\u7CFB\u306E\u30D4\u30AF\u30BB\u30EB\u5EA7\u6A19\u306B\u3059\u308B\n    // \u30EF\u30FC\u30EB\u30C9\u5EA7\u6A19\u7CFB\u306F\u3001\u539F\u70B9\u3092\u4E2D\u5FC3\u3068\u3057\u3066\u6771\u5074/\u5357\u5074\u304C\u6B63\u3068\u306A\u308B\u3053\u3068\u306B\u6CE8\u610F\u3059\u308B\n    static meter2world(mx: number, my: number, zoom: number) {\n        const mpp = this.getMetersPerPixelByZoom(zoom);\n        const world_px = mx / mpp;\n        const world_py = -my / mpp;\n        return { x: world_px, y: world_py };\n    }\n\n    // \u6307\u5B9A\u30E1\u30FC\u30C8\u30EB/\u30D4\u30AF\u30BB\u30EB\u306B\u53CE\u307E\u308B\u30BA\u30FC\u30E0\u30EC\u30D9\u30EB\u3092\u8A08\u7B97\n    static getZoomByMetersPerPixel(mpp: number) {\n        return Math.log((2 * Math.PI * R) / (mpp * TILE_PIXEL)) / Math.log(2);\n    }\n\n    // \u6307\u5B9A\u30BA\u30FC\u30E0\u30EC\u30D9\u30EB\u306B\u304A\u3051\u308B\u30BF\u30A4\u30EB\uFF11\u8FBA\u306E\u9577\u3055(\u30E1\u30FC\u30C8\u30EB)\u3092\u8A08\u7B97\n    static getMetersPerTileByZoom(zoom: number) {\n        return (2 * Math.PI * R) / 2 ** zoom;\n    }\n\n    // \u6307\u5B9A\u30BA\u30FC\u30E0\u30EC\u30D9\u30EB\u306B\u304A\u3051\u308B1px\u3042\u305F\u308A\u306E\u30E1\u30FC\u30C8\u30EB\u3092\u8A08\u7B97\n    static getMetersPerPixelByZoom(zoom: number) {\n        return (2 * R * Math.PI) / (2 ** zoom * TILE_PIXEL);\n    }\n}\n"],
  "mappings": "AACO,MAAM,IAAI;AACV,MAAM,aAAa;AAEnB,MAAM,UAAU;AAAA,EACnB,OAAO,mBAAmB,MAAc;AACpC,WAAO,cAAc,KAAK,OAAO,KAAK,KAAK,MAAM,IAAI;AAAA,EACzD;AAAA;AAAA,EAGA,OAAO,eAAe,KAAa,KAAa;AAC5C,UAAM,IAAK,MAAM,gBAAe;AAChC,UAAM,IAAI,UAAU,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAK,MAAM,KAAK,KAAM,MAAM,CAAC,CAAC;AAC9E,WAAO,EAAE,GAAG,EAAE;AAAA,EAClB;AAAA;AAAA,EAGA,OAAO,eAAe,IAAY,IAAY;AAC1C,UAAM,OAAQ,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAM;AAC1E,UAAM,MAAO,KAAK,IAAI,KAAK,KAAM;AACjC,WAAO,EAAE,KAAK,IAAI;AAAA,EACtB;AAAA;AAAA,EAGA,OAAO,YAAY,IAAY,IAAY,MAAc;AACrD,UAAM,IAAI,KAAK,OAAQ,KAAK,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,MAAO,KAAK,KAAK,MAAM,IAAI,CAAC;AACrF,UAAM,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,KAAK,KAAK,MAAM,IAAI,CAAC;AACzF,WAAO,EAAE,GAAG,EAAE;AAAA,EAClB;AAAA;AAAA,EAGA,OAAO,aAAa,KAAa,KAAa,MAAc;AACxD,UAAM,IAAI,UAAU,eAAe,KAAK,GAAG;AAC3C,WAAO,UAAU,YAAY,EAAE,GAAG,EAAE,GAAG,IAAI;AAAA,EAC/C;AAAA;AAAA;AAAA,EAIA,OAAO,YAAY,GAAW,GAAW,MAAc;AACnD,UAAM,KAAM,IAAI,KAAK,KAAK,MAAM,IAAI,KAAM,IAAI,IAAI,KAAK,MAAM,IAAI,KAAK;AACtE,UAAM,MAAM,IAAI,IAAI,KAAK,KAAK,MAAM,IAAI,MAAM,IAAI,IAAI,KAAK,MAAM,IAAI,KAAK;AAC1E,WAAO,EAAE,GAAG,IAAI,GAAG,GAAG;AAAA,EAC1B;AAAA;AAAA;AAAA,EAIA,OAAO,YAAY,IAAY,IAAY,MAAc;AACrD,UAAM,MAAM,KAAK,wBAAwB,IAAI;AAC7C,UAAM,WAAW,KAAK;AACtB,UAAM,WAAW,CAAC,KAAK;AACvB,WAAO,EAAE,GAAG,UAAU,GAAG,SAAS;AAAA,EACtC;AAAA;AAAA,EAGA,OAAO,wBAAwB,KAAa;AACxC,WAAO,KAAK,IAAK,IAAI,KAAK,KAAK,KAAM,MAAM,WAAW,IAAI,KAAK,IAAI,CAAC;AAAA,EACxE;AAAA;AAAA,EAGA,OAAO,uBAAuB,MAAc;AACxC,WAAQ,IAAI,KAAK,KAAK,IAAK,KAAK;AAAA,EACpC;AAAA;AAAA,EAGA,OAAO,wBAAwB,MAAc;AACzC,WAAQ,IAAI,IAAI,KAAK,MAAO,KAAK,OAAO;AAAA,EAC5C;AACJ;",
  "names": []
}
