import { LatLng, type LatLngExpression } from './latlng.js';
import type { GPXData } from './gpx.js';
type PointerInfo = {
    id: number;
    x: number;
    y: number;
    old?: {
        x: number;
        y: number;
    };
};
export type MapricornOptions = {
    container?: HTMLElement;
    width?: string;
    height?: string;
    mapSource?: string;
    center?: LatLngExpression;
    zoom?: number;
    enableRotate?: boolean;
    showTileInfo?: boolean;
};
export declare class Mapricorn {
    container?: HTMLElement;
    width: string;
    height: string;
    canvas: HTMLCanvasElement;
    canvas2: HTMLCanvasElement;
    mapSource: string;
    gpxData?: GPXData;
    center: LatLng;
    zoom: number;
    zoomMax: number;
    zoomMin: number;
    latMax: number;
    lngMin: number;
    enableRotate: boolean;
    showTileInfo: boolean;
    _serial: number;
    _oldPoint?: {
        x: number;
        y: number;
    };
    _isMoving: boolean;
    _imageCache: Record<string, HTMLImageElement>;
    _drawing: boolean;
    _pointers: Record<number, PointerInfo>;
    _shiftL: boolean;
    _theta: number;
    constructor(opts?: MapricornOptions);
    bind(container: HTMLElement): void;
    setup(): void;
    resize(): void;
    draw(offsetX?: number, offsetY?: number, zoom?: number, easing?: boolean): void;
    draw2d(canvas: HTMLCanvasElement, center: LatLng, zoom: number, decimals?: number, alpha?: number, offsetX?: number, offsetY?: number): void;
    getMapURL(x: number, y: number, zoom: number): string;
    setGPXData(gpxData: GPXData, setView?: boolean): void;
    adjustCenterByGPXData(): void;
    adjustZoomLevelByGPXData(margin?: number): number | undefined;
    setMapSource(mapSource: string): void;
    setView(center: LatLngExpression, zoom?: number): void;
    setZoom(zoom?: number): void;
    moveCenter(dx: number, dy: number): void;
    start({ offsetX: x, offsetY: y }: MouseEvent | Record<string, number>): void;
    stop(): void;
    move({ offsetX: x, offsetY: y }: MouseEvent | Record<string, number>): void;
    handlerResize(): () => void;
    handlerPointerDown(): (e: PointerEvent) => void;
    handlerPointerUp(): (e: PointerEvent) => void;
    handlerPointerMove(): (e: PointerEvent) => void;
    handlerMouseWheel(): (e: WheelEvent) => void;
    handlerKeyDown(): (e: KeyboardEvent) => void;
    handlerKeyUp(): (e: KeyboardEvent) => void;
}
export {};
